{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-3746b4f3-b4a0-44eb-8e04-943a713cf7e6",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C# programming, storing tokens or keys directly in the source code is a common security vulnerability. This practice can lead to unauthorized access if the source code is exposed, as attackers can easily extract sensitive information such as API keys, database credentials, or encryption keys. This vulnerability is particularly dangerous in environments where the source code is shared or stored in version control systems.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control, such as `appsettings.json` in .NET, and ensure they are encrypted or secured.\n3. **Secret Management Tools**: Utilize secret management tools like Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault to securely store and access sensitive information.\n4. **Access Control**: Implement strict access control measures to ensure only authorized personnel can access sensitive information.\n5. **Code Reviews**: Conduct regular code reviews to identify and remove any hardcoded secrets.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to refactor code to avoid storing tokens or keys directly in the source code:\n\n#### Vulnerable Code\n\n```csharp\npublic class ApiClient\n{\n    private const string ApiKey = \"b919bc84de9254bcf8f614d392db83bb\";\n\n    public void Connect()\n    {\n        // Use the API key to connect to the service\n    }\n}\n```\n\n#### Fixed Code\n\n```csharp\npublic class ApiClient\n{\n    private readonly string _apiKey;\n\n    public ApiClient()\n    {\n        _apiKey = Environment.GetEnvironmentVariable(\"API_KEY\");\n        if (string.IsNullOrEmpty(_apiKey))\n        {\n            throw new InvalidOperationException(\"API key is not set in environment variables.\");\n        }\n    }\n\n    public void Connect()\n    {\n        // Use the API key to connect to the service\n    }\n}\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies to execute properly, as it utilizes the `System` namespace which is part of the .NET framework.\n\n### OWASP Resources\n\n- [OWASP Top Ten: A6:2017-Security Misconfiguration](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)\n- [OWASP Cheat Sheet: Secrets Management](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-ff1f0b78-bb3a-4a6e-b15a-ef10aa4d8c6d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C# programming, storing tokens or keys directly in the source code is a common security vulnerability. This practice can lead to unauthorized access if the source code is exposed, as attackers can easily extract sensitive information such as API keys, database credentials, or encryption keys. This vulnerability is particularly dangerous in environments where the source code is shared or stored in version control systems.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control, such as `appsettings.json` in .NET, and ensure they are encrypted or secured.\n3. **Secret Management Tools**: Utilize secret management tools like Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault to securely store and access sensitive information.\n4. **Access Control**: Implement strict access control measures to ensure only authorized personnel can access sensitive information.\n5. **Code Reviews**: Conduct regular code reviews to identify and remove any hardcoded secrets.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to refactor code to avoid storing tokens or keys directly in the source code:\n\n#### Vulnerable Code\n\n```csharp\npublic class ApiClient\n{\n    private const string ApiKey = \"b919bc84de9254bcf8f614d392db83bb\";\n\n    public void Connect()\n    {\n        // Use the API key to connect to the service\n    }\n}\n```\n\n#### Fixed Code\n\n```csharp\npublic class ApiClient\n{\n    private readonly string _apiKey;\n\n    public ApiClient()\n    {\n        _apiKey = Environment.GetEnvironmentVariable(\"API_KEY\");\n        if (string.IsNullOrEmpty(_apiKey))\n        {\n            throw new InvalidOperationException(\"API key is not set in environment variables.\");\n        }\n    }\n\n    public void Connect()\n    {\n        // Use the API key to connect to the service\n    }\n}\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies to execute properly, as it utilizes the `System` namespace which is part of the .NET framework.\n\n### OWASP Resources\n\n- [OWASP Top Ten: A6:2017-Security Misconfiguration](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)\n- [OWASP Cheat Sheet: Secrets Management](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-48a706a4-bc68-4ec3-9ce8-df3cae5070ab",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C# programming, storing tokens or keys directly in the source code is a common security vulnerability. This practice can lead to unauthorized access if the source code is exposed, as sensitive information like API keys, database credentials, or encryption keys can be easily extracted by malicious actors. This vulnerability is often referred to as \"hardcoding secrets\" and can lead to severe security breaches if not addressed.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control systems. Ensure these files are encrypted or access-controlled.\n3. **Secret Management Tools**: Utilize secret management tools such as Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault to securely store and manage sensitive information.\n4. **Access Control**: Limit access to sensitive information to only those who need it, and regularly audit access logs.\n5. **Code Reviews**: Implement regular code reviews to ensure that no sensitive information is hardcoded in the source code.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```csharp\npublic class ApiClient\n{\n    private string apiKey = \"460881a8263ce454799a8c689c28d8c9\"; // Hardcoded API key\n\n    public void Connect()\n    {\n        // Use the API key to connect to a service\n    }\n}\n```\n\n#### Fixed Code\n\n```csharp\npublic class ApiClient\n{\n    private string apiKey;\n\n    public ApiClient()\n    {\n        // Retrieve the API key from an environment variable\n        apiKey = Environment.GetEnvironmentVariable(\"API_KEY\");\n        if (string.IsNullOrEmpty(apiKey))\n        {\n            throw new InvalidOperationException(\"API key is not set in the environment variables.\");\n        }\n    }\n\n    public void Connect()\n    {\n        // Use the API key to connect to a service\n    }\n}\n```\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies to execute properly, as it uses the `System` namespace which is part of the .NET framework.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series: Secrets Management](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-c2e86b1f-c281-4bc2-bec7-b689e082b1e3",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C# programming, storing tokens or keys directly in the source code is a common security vulnerability. This practice can lead to unauthorized access if the source code is exposed, as sensitive information like API keys, database credentials, or encryption keys can be easily extracted by malicious actors. This vulnerability is often referred to as \"hardcoding secrets\" and can lead to severe security breaches if not addressed.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control systems. Ensure these files are encrypted or access-controlled.\n3. **Secret Management Tools**: Utilize secret management tools such as Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault to securely store and manage sensitive information.\n4. **Access Control**: Limit access to sensitive information to only those who need it, and regularly audit access logs.\n5. **Code Reviews**: Implement regular code reviews to ensure that no sensitive information is hardcoded in the source code.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code\n\n```csharp\npublic class ApiClient\n{\n    private string apiKey = \"460881a8263ce454799a8c689c28d8c9\"; // Hardcoded API key\n\n    public void Connect()\n    {\n        // Use the API key to connect to a service\n    }\n}\n```\n\n#### Fixed Code\n\n```csharp\npublic class ApiClient\n{\n    private string apiKey;\n\n    public ApiClient()\n    {\n        // Retrieve the API key from an environment variable\n        apiKey = Environment.GetEnvironmentVariable(\"API_KEY\");\n        if (string.IsNullOrEmpty(apiKey))\n        {\n            throw new InvalidOperationException(\"API key is not set in the environment variables.\");\n        }\n    }\n\n    public void Connect()\n    {\n        // Use the API key to connect to a service\n    }\n}\n```\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies to execute properly, as it uses the `System` namespace which is part of the .NET framework.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series: Secrets Management](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-ba852427-656f-42a0-90f3-4f17de8201ba",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C# programming, storing tokens or keys directly within the source code is a common security vulnerability. This practice can lead to unauthorized access if the source code is exposed, as attackers can easily extract sensitive information such as API keys, database credentials, or encryption keys. This vulnerability can result in data breaches, unauthorized transactions, or other malicious activities.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control systems. Ensure these files are encrypted or secured appropriately.\n3. **Secrets Management Tools**: Utilize secrets management tools like Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault to securely store and access sensitive information.\n4. **Access Controls**: Implement strict access controls and audit logs to monitor who accesses sensitive information.\n5. **Code Reviews**: Conduct regular code reviews to ensure that sensitive information is not inadvertently included in the source code.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to refactor code to avoid storing tokens or keys directly in the source code:\n\n#### Vulnerable Code\n\n```csharp\npublic class ApiClient\n{\n    private const string ApiKey = \"490fe6c46146140cca8766a31c9dfc0c\";\n\n    public void Connect()\n    {\n        // Use the API key to connect to the service\n    }\n}\n```\n\n#### Fixed Code\n\n```csharp\nusing System;\n\npublic class ApiClient\n{\n    private readonly string _apiKey;\n\n    public ApiClient()\n    {\n        _apiKey = Environment.GetEnvironmentVariable(\"API_KEY\");\n        if (string.IsNullOrEmpty(_apiKey))\n        {\n            throw new InvalidOperationException(\"API key is not set in environment variables.\");\n        }\n    }\n\n    public void Connect()\n    {\n        // Use the API key to connect to the service\n    }\n}\n```\n\n### Library Dependencies\n\nThe above code example does not require any additional library dependencies beyond the standard .NET libraries.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series - Secrets Management](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-8d863a96-1f56-4ec8-902d-c171be1d639d",
              "help": {
                "text": "",
                "markdown": "### Description\n\nStoring tokens or keys directly in source code is a common security vulnerability in C# programming, as it can lead to unauthorized access if the source code is exposed. This vulnerability occurs when sensitive information, such as API keys, encryption keys, or tokens, is hardcoded into the source code, making it accessible to anyone who has access to the codebase. This can lead to data breaches, unauthorized access, and other security issues.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control systems to store sensitive data.\n3. **Secrets Management Tools**: Utilize secrets management tools like Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault to securely store and manage sensitive information.\n4. **Access Control**: Implement strict access control measures to ensure that only authorized personnel can access sensitive information.\n5. **Code Reviews**: Conduct regular code reviews to identify and remove any hardcoded sensitive information.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to refactor code to avoid storing tokens or keys directly in the source code:\n\n```csharp\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Original code with hardcoded token\n        // string token = \"b875fa74fa43a4c48a44634d5f3e6d3d\";\n\n        // Refactored code to retrieve token from environment variable\n        string token = Environment.GetEnvironmentVariable(\"MY_SECURE_TOKEN\");\n\n        if (string.IsNullOrEmpty(token))\n        {\n            Console.WriteLine(\"Token is not set. Please set the environment variable 'MY_SECURE_TOKEN'.\");\n            return;\n        }\n\n        Console.WriteLine(\"Token retrieved successfully.\");\n        // Proceed with using the token securely\n    }\n}\n```\n\n### Library Dependencies\n\nThe above code example does not require any additional library dependencies to execute properly, as it uses the `System` namespace, which is part of the .NET Core and .NET Framework base class libraries.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-83e609d6-f92f-4c56-a38f-b887c311be71",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C# programming, storing tokens or keys directly in the source code is a common security vulnerability. This practice can lead to unauthorized access if the source code is exposed, as attackers can easily extract sensitive information such as API keys, database credentials, or encryption keys. This vulnerability is particularly dangerous in public repositories or when the code is shared with untrusted parties.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control, such as `appsettings.json` in ASP.NET Core, and ensure they are encrypted or secured.\n3. **Secret Management Tools**: Utilize secret management tools like Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault to securely store and access sensitive information.\n4. **Access Control**: Implement strict access control measures to ensure only authorized personnel can access sensitive information.\n5. **Code Reviews**: Conduct regular code reviews to identify and remove any hardcoded secrets.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to refactor code to avoid storing tokens or keys directly in the source code:\n\n#### Vulnerable Code\n\n```csharp\npublic class ApiClient\n{\n    private const string ApiKey = \"5109b2ad9b8be459592190a5678464e3\";\n\n    public void Connect()\n    {\n        // Use the API key to connect to the service\n    }\n}\n```\n\n#### Fixed Code\n\n```csharp\npublic class ApiClient\n{\n    private readonly string _apiKey;\n\n    public ApiClient()\n    {\n        _apiKey = Environment.GetEnvironmentVariable(\"API_KEY\");\n        if (string.IsNullOrEmpty(_apiKey))\n        {\n            throw new InvalidOperationException(\"API key is not set in environment variables.\");\n        }\n    }\n\n    public void Connect()\n    {\n        // Use the API key to connect to the service\n    }\n}\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies to execute properly, as it utilizes the `System` namespace which is part of the .NET framework.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series - Secrets Management](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-1ce546ae-aa15-49e5-bc56-6b68e55d3cb2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C# programming, storing tokens or keys directly in the source code is a common security vulnerability. This practice can lead to unauthorized access if the source code is exposed, as attackers can easily extract sensitive information such as API keys, database credentials, or encryption keys. This vulnerability is particularly dangerous in public repositories or when the code is shared with untrusted parties.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control, such as `appsettings.json` in ASP.NET Core, and ensure they are encrypted or secured.\n3. **Secret Management Tools**: Utilize secret management tools like Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault to securely store and access sensitive information.\n4. **Access Control**: Implement strict access control measures to ensure only authorized personnel can access sensitive information.\n5. **Code Reviews**: Conduct regular code reviews to identify and remove any hardcoded secrets.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to refactor code to avoid storing tokens or keys directly in the source code:\n\n#### Vulnerable Code\n\n```csharp\npublic class ApiClient\n{\n    private const string ApiKey = \"5109b2ad9b8be459592190a5678464e3\";\n\n    public void Connect()\n    {\n        // Use the API key to connect to the service\n    }\n}\n```\n\n#### Fixed Code\n\n```csharp\npublic class ApiClient\n{\n    private readonly string _apiKey;\n\n    public ApiClient()\n    {\n        _apiKey = Environment.GetEnvironmentVariable(\"API_KEY\");\n        if (string.IsNullOrEmpty(_apiKey))\n        {\n            throw new InvalidOperationException(\"API key is not set in environment variables.\");\n        }\n    }\n\n    public void Connect()\n    {\n        // Use the API key to connect to the service\n    }\n}\n```\n\n### Library Dependencies\n\nThe above code does not require any additional library dependencies to execute properly, as it utilizes the `System` namespace which is part of the .NET framework.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series - Secrets Management](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-672ed507-6da6-47b7-89a4-045ee74d2763",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C# programming, storing tokens or keys directly in the source code is a common security vulnerability. This practice can lead to unauthorized access if the source code is exposed, as attackers can easily extract sensitive information such as API keys, database credentials, or encryption keys. This vulnerability is particularly dangerous in public repositories or when the code is shared with untrusted parties.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control, such as `appsettings.json` in ASP.NET Core, and ensure they are encrypted or secured.\n3. **Secret Management Tools**: Utilize secret management tools like Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault to securely store and access sensitive information.\n4. **Access Control**: Implement strict access control measures to limit who can view or modify sensitive information.\n5. **Code Reviews**: Conduct regular code reviews to ensure that sensitive information is not inadvertently included in the source code.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to refactor code to avoid storing tokens or keys directly in the source code:\n\n#### Vulnerable Code\n\n```csharp\npublic class ApiClient\n{\n    private string apiKey = \"c67f821adbb6348a3a21573a25b55de0\";\n\n    public void Connect()\n    {\n        // Use the apiKey to connect to the API\n    }\n}\n```\n\n#### Fixed Code\n\n```csharp\npublic class ApiClient\n{\n    private string apiKey;\n\n    public ApiClient()\n    {\n        // Retrieve the API key from environment variables\n        apiKey = Environment.GetEnvironmentVariable(\"API_KEY\");\n        if (string.IsNullOrEmpty(apiKey))\n        {\n            throw new InvalidOperationException(\"API key is not set in environment variables.\");\n        }\n    }\n\n    public void Connect()\n    {\n        // Use the apiKey to connect to the API\n    }\n}\n```\n\n### Library Dependencies\n\nThe above code example does not require any additional library dependencies to execute properly, as it uses the `System` namespace, which is part of the .NET Framework.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series - Secrets Management](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            },
            {
              "id": "glog-1280c3e5-db69-46e3-8ad7-207ff6678c1c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nIn C# programming, storing tokens or keys directly in the source code is a common security vulnerability. This practice can lead to unauthorized access if the source code is exposed, as attackers can easily extract sensitive information such as API keys, database credentials, or encryption keys. This vulnerability is particularly dangerous in environments where the source code is shared or stored in version control systems without proper access controls.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control, such as `appsettings.json` in .NET, and ensure they are encrypted or secured.\n3. **Secret Management Tools**: Utilize secret management tools like Azure Key Vault, AWS Secrets Manager, or HashiCorp Vault to securely store and access sensitive information.\n4. **Access Controls**: Implement strict access controls and audit logging to monitor access to sensitive information.\n5. **Code Reviews**: Conduct regular code reviews to ensure that sensitive information is not inadvertently included in the source code.\n\n### Source Code Fix Recommendation\n\n#### Vulnerable Code Example\n\n```csharp\npublic class ApiClient\n{\n    private string apiKey = \"367310b4ca95c4b00a2215568f1af735\"; // Vulnerable: Hardcoded API key\n\n    public void Connect()\n    {\n        // Use the API key to connect to a service\n    }\n}\n```\n\n#### Fixed Code Example\n\n```csharp\npublic class ApiClient\n{\n    private string apiKey;\n\n    public ApiClient()\n    {\n        // Retrieve the API key from an environment variable\n        apiKey = Environment.GetEnvironmentVariable(\"API_KEY\");\n        if (string.IsNullOrEmpty(apiKey))\n        {\n            throw new InvalidOperationException(\"API key is not set in the environment variables.\");\n        }\n    }\n\n    public void Connect()\n    {\n        // Use the API key to connect to a service\n    }\n}\n```\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies beyond the standard .NET libraries.\n\n### OWASP Resources\n\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n- [OWASP Cheat Sheet Series - Secrets Management](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-798: Use of Hard-coded Credentials](https://cwe.mitre.org/data/definitions/798.html)"
              },
              "properties": {
                "tags": [
                  "DS173237"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-3746b4f3-b4a0-44eb-8e04-943a713cf7e6",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not store tokens or keys in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Packages/src/Samples~/v4 Compatible Components/Runtime/Common/UIEffectV4Editor.cs"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "endLine": 55,
                  "endColumn": 54,
                  "charOffset": 2463,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"b919bc84de9254bcf8f614d392db83bb\"",
                    "rendered": {
                      "text": "\"b919bc84de9254bcf8f614d392db83bb\"",
                      "markdown": "`\"b919bc84de9254bcf8f614d392db83bb\"`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-ff1f0b78-bb3a-4a6e-b15a-ef10aa4d8c6d",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not store tokens or keys in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Assets/Samples/v4 Compatible Components/Runtime/Common/UIEffectV4Editor.cs"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "endLine": 55,
                  "endColumn": 54,
                  "charOffset": 2463,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"b919bc84de9254bcf8f614d392db83bb\"",
                    "rendered": {
                      "text": "\"b919bc84de9254bcf8f614d392db83bb\"",
                      "markdown": "`\"b919bc84de9254bcf8f614d392db83bb\"`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-48a706a4-bc68-4ec3-9ce8-df3cae5070ab",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not store tokens or keys in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Assets/Samples/v4 Compatible Components/Runtime/Common/UIEffectV4Editor.cs"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 20,
                  "endLine": 54,
                  "endColumn": 54,
                  "charOffset": 2407,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"460881a8263ce454799a8c689c28d8c9\"",
                    "rendered": {
                      "text": "\"460881a8263ce454799a8c689c28d8c9\"",
                      "markdown": "`\"460881a8263ce454799a8c689c28d8c9\"`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-c2e86b1f-c281-4bc2-bec7-b689e082b1e3",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not store tokens or keys in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Packages/src/Samples~/v4 Compatible Components/Runtime/Common/UIEffectV4Editor.cs"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 20,
                  "endLine": 54,
                  "endColumn": 54,
                  "charOffset": 2407,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"460881a8263ce454799a8c689c28d8c9\"",
                    "rendered": {
                      "text": "\"460881a8263ce454799a8c689c28d8c9\"",
                      "markdown": "`\"460881a8263ce454799a8c689c28d8c9\"`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-ba852427-656f-42a0-90f3-4f17de8201ba",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not store tokens or keys in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Packages/src/Runtime/UIEffectProjectSettings.cs"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 17,
                  "endLine": 140,
                  "endColumn": 51,
                  "charOffset": 6132,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"490fe6c46146140cca8766a31c9dfc0c\"",
                    "rendered": {
                      "text": "\"490fe6c46146140cca8766a31c9dfc0c\"",
                      "markdown": "`\"490fe6c46146140cca8766a31c9dfc0c\"`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-8d863a96-1f56-4ec8-902d-c171be1d639d",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not store tokens or keys in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Packages/src/Runtime/UIEffectProjectSettings.cs"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 17,
                  "endLine": 141,
                  "endColumn": 51,
                  "charOffset": 6230,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"b875fa74fa43a4c48a44634d5f3e6d3d\"",
                    "rendered": {
                      "text": "\"b875fa74fa43a4c48a44634d5f3e6d3d\"",
                      "markdown": "`\"b875fa74fa43a4c48a44634d5f3e6d3d\"`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-83e609d6-f92f-4c56-a38f-b887c311be71",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not store tokens or keys in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Assets/Samples/ShaderGraph Support (Unity 6 BuiltIn)~/BuiltInUIEffectSubTarget.cs"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 79,
                  "endLine": 13,
                  "endColumn": 113,
                  "charOffset": 407,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"5109b2ad9b8be459592190a5678464e3\"",
                    "rendered": {
                      "text": "\"5109b2ad9b8be459592190a5678464e3\"",
                      "markdown": "`\"5109b2ad9b8be459592190a5678464e3\"`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-1ce546ae-aa15-49e5-bc56-6b68e55d3cb2",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not store tokens or keys in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Packages/src/Samples~/ShaderGraph Support (Unity 6 BuiltIn)~/BuiltInUIEffectSubTarget.cs"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 79,
                  "endLine": 13,
                  "endColumn": 113,
                  "charOffset": 407,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"5109b2ad9b8be459592190a5678464e3\"",
                    "rendered": {
                      "text": "\"5109b2ad9b8be459592190a5678464e3\"",
                      "markdown": "`\"5109b2ad9b8be459592190a5678464e3\"`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-672ed507-6da6-47b7-89a4-045ee74d2763",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not store tokens or keys in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Packages/src/Runtime/UIEffectProjectSettings.cs"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 17,
                  "endLine": 142,
                  "endColumn": 51,
                  "charOffset": 6332,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"c67f821adbb6348a3a21573a25b55de0\"",
                    "rendered": {
                      "text": "\"c67f821adbb6348a3a21573a25b55de0\"",
                      "markdown": "`\"c67f821adbb6348a3a21573a25b55de0\"`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        },
        {
          "ruleId": "glog-1280c3e5-db69-46e3-8ad7-207ff6678c1c",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Do not store tokens or keys in source code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Packages/src/Runtime/UIEffectProjectSettings.cs"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 17,
                  "endLine": 139,
                  "endColumn": 51,
                  "charOffset": 6027,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"367310b4ca95c4b00a2215568f1af735\"",
                    "rendered": {
                      "text": "\"367310b4ca95c4b00a2215568f1af735\"",
                      "markdown": "`\"367310b4ca95c4b00a2215568f1af735\"`"
                    }
                  },
                  "sourceLanguage": "csharp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "Medium",
            "tags": [
              "Implementation.Privacy.Token"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}